datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizations       Organization[]
  organizationMembers OrganizationMember[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model OrganizationSubscription {
  id             String         @id @unique
  price_id       String
  status         String
  period_ends_at DateTime       @db.Timestamp(6)
  organization   Organization[]
}

model Organization {
  id                  String                    @id @default(cuid())
  name                String                    @db.VarChar(50)
  slug                String                    @unique @db.VarChar(50)
  ownerId             String
  customerId          Int?                      @unique
  subscriptionId      String?
  user                User                      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  subscription        OrganizationSubscription? @relation(fields: [subscriptionId], references: [id], onUpdate: NoAction)
  organizationMembers OrganizationMember[]
  invites             OrganizationInvite[]
}

model OrganizationMember {
  id           String                 @id @default(cuid())
  orgId        String
  userId       String
  role         OrganizationMemberRole @default(OWNER)
  organization Organization           @relation(fields: [orgId], references: [id], onUpdate: NoAction)
  user         User                   @relation(fields: [userId], references: [id], onUpdate: NoAction)

  @@unique([orgId, userId])
}

enum OrganizationMemberRole {
  OWNER
  MEMBER
}

model OrganizationInvite {
  id           String                 @id @default(cuid())
  orgId        String
  email        String
  role         OrganizationMemberRole @default(MEMBER)
  organization Organization           @relation(fields: [orgId], references: [id], onUpdate: NoAction)

  @@unique([orgId, email])
}
